package com.scxh.android.animation.alpha;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;

import com.scxh.android.R;

public class CrossfadeActivity extends Activity {

	private View mContentView;
	private View mLoadingView;
	private int mShortAnimationDuration;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_animaition_alpha_layout);

		mContentView = findViewById(R.id.content);
		mLoadingView = findViewById(R.id.loading_spinner);

		// Initially hide the content view.
		mContentView.setVisibility(View.GONE);

		// Retrieve and cache the system's default "short" animation time.
		mShortAnimationDuration = 2000;//getResources().getInteger(android.R.integer.config_shortAnimTime);
		
		crossfade();
	}

	private void crossfade() {

		// Set the content view to 0% opacity but visible, so that it is visible
		// (but fully transparent) during the animation.
		mContentView.setAlpha(0f);
		mContentView.setVisibility(View.VISIBLE);

		// Animate the content view to 100% opacity, and clear any animation
		// listener set on the view.
		mContentView.animate().alpha(1f).setDuration(mShortAnimationDuration)
				.setListener(null);

		// Animate the loading view to 0% opacity. After the animation ends,
		// set its visibility to GONE as an optimization step (it won't
		// participate in layout passes, etc.)
		mLoadingView.animate().alpha(0f).setDuration(mShortAnimationDuration)
				.setListener(new AnimatorListenerAdapter() {
					@Override
					public void onAnimationEnd(Animator animation) {
						mLoadingView.setVisibility(View.GONE);
					}
				});
	}

}
